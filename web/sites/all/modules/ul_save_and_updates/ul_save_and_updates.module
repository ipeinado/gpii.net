<?php

require_once('includes/utils.php');
require_once('includes/blocks.php');
require_once('includes/views.php');

/**
 * Implements hook_init().
 */
function ul_save_and_updates_init() {
  drupal_add_js(array(
    'ul_save_and_updates' => array(
      'uid' => $GLOBALS['user']->uid,
      'nid' => arg(1),
    )
  ), 'setting');
  drupal_add_js(drupal_get_path('module', 'ul_save_and_updates') . '/js/saved_search_ajax.js');
}

/**
 * Implements hook_permission().
 */
function ul_save_and_updates_permission() {
  return array(
    'manage_saved_search' => array(
      'title' => t('Manage saved search and notifications.'),
    )
  );
}

/**
 * Implements hook_menu().
 */
function ul_save_and_updates_menu() {
  $items = array();

  // pages
  $items['user/%user/email-notifications'] = array(
    'title' => 'Email Notifications',
    'page callback' => '_saved_search_pageEmailNotifications',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('manage_saved_search'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['saved-search/change-log/add/%'] = array(
    'title' => 'Finalize Revisions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ul_save_and_updates_change_log_form'),
    'access callback' => 'user_access',
    'access arguments' => array('manage_saved_search'),
    'type' => MENU_NORMAL_ITEM,
  );

  // api endpoints
  $items['saved-search/exists/%/%'] = array(
    'page callback' => '_saved_search_exists',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'page arguments' => array(2, 3),
  );
  $items['saved-search/read/%'] = array(
    'page callback' => '_saved_search_readAll',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'page arguments' => array(2),
  );
  $items['saved-search/edit'] = array(
    'page callback' => '_saved_search_edit',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['saved-search/save'] = array(
    'page callback' => '_saved_search_save',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['saved-search/delete'] = array(
    'page callback' => '_saved_search_delete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/email-test'] = array(
    'title' => 'Mailgun Test',
    'page callback' => '_saved_search_pageEmailTest',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access_administration_menu'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

function _saved_search_pageEmailTest($user) {

  global $base_url;
  global $base_path;

  // Send an email via mailgun to confirm their subscription.
  $to = 'bbc.underthebridge@gmail.com';
  $site_name = variable_get('site_name', '');
  $default_from = variable_get('site_mail', ini_get('sendmail_from'));
  $from = (!empty($site_name)) ? $site_name . ' <' . $default_from . '>' : $default_from;
  $link = $base_url . $base_path . 'user/' . $user->uid . '/email-notifications';
  $body = explode('\n', 'Your subscription has been saved. You can manage your saved searches and notification preferences from your ' . l('Email Notifications', $link) . ' page at any time.');

  $params = array(
    'message' => $body,
    'subject' => 'Subscription Saved'
  );
  //drupal_mail('mailgun', 'test', $to, $GLOBALS['language'], $params, $from);

  // If the POST for search_url has the full address, we want to remove it, but need to find the right regex first
  
  $search_url = 'https://dev.ul.gpii.net/search/power/#!?query=cart%20United&page=1';
  $replace = "'^https?:\/\/.*[\r\n]*net'";
  $url = preg_replace($replace, ' ', $search_url);
  //dpm($url);

  $classicurlQuery = 'search_api_views_fulltext=Document&product_status=2&sort_by=search_api_relevance&sort_order=DESC&items_per_page=25&f[0]=field_trouble_with%3A4270&f[1]=field_operating_system%3A4460&f[2]=field_operating_system%3A4461';

  dpm($classicurlQuery);

  $classicsearchResults = _saved_search_getSearchResults($classicurlQuery);

  dpm($classicsearchResults);

  $powerurlQuery = 'troubles=4270&os=4460&os=4461&query=Document';

  dpm($powerurlQuery);

  $powersearchResults = _saved_search_getSearchResults($powerurlQuery);

  dpm($powersearchResults);
  return "<p>Testing various functions.</p>";

}

function _saved_search_pageEmailNotifications($user) {
  $products = db_select('saved_searches', 's')
      ->condition('uid', $user->uid)
      ->condition('search_type', 'product')
      ->fields('s')
      ->execute()
      ->fetchAll();

  $productHeaders = array(
    'Product Name',
    'Last Update Sent',
    'Actions'
  );

  $productRows = array();

  foreach ($products as $product) {
    $row = array();
    array_push($row, "<a href=\"$product->search_url\">$product->search_name</a>");
    array_push($row, $product->last_notification ? $product->last_notification : 'never');
    array_push($row, _saved_search_createRemoveButton($product->id));
    $productRows[$product->id] = $row;
  }

  $companies = db_select('saved_searches', 's')
      ->condition('uid', $user->uid)
      ->condition('search_type', 'company')
      ->fields('s')
      ->execute()
      ->fetchAll();

  $companyHeaders = array(
    'Manufacturer Name',
    'NEW product notification',
    'UPDATED product notification',
    'Last update sent',
    'Actions'
  );

  $companyRows = array();

  foreach ($companies as $company) {
    $row = array();
    array_push($row, "<a href=\"$company->search_url\">$company->search_name</a>");
    array_push(
      $row,
      _saved_search_createUpdateCheckbox(
        'notify-me-new-entries',
        $company->id,
        'new_entries',
        in_array('new', explode(', ', $company->notification_type)),
        'New product notification'
      )
    );
    array_push(
      $row,
      _saved_search_createUpdateCheckbox(
        'notify-me-major-changes',
        $company->id,
        'major_changes',
        in_array('changed', explode(', ', $company->notification_type)),
        'Updated product notification'
      )
    );
    array_push($row, $company->last_notification ? $company->last_notification : 'never');
    array_push($row, _saved_search_createRemoveButton($company->id));
    $companyRows[$company->id] = $row;
  }

  $or = db_or();
  $or->condition('search_type', 'classic_search');
  $or->condition('search_type', 'power_search');

  $customSearches = db_select('saved_searches', 's')
      ->condition('uid', $user->uid)
      ->condition($or)
      ->fields('s')
      ->execute()
      ->fetchAll();

  $customSearchHeaders = array(
    'Search',
    'NEW product notification',
    'UPDATED product notification',
    'Last update sent',
    'Actions'
  );

  $customSearchRows = array();

  foreach ($customSearches as $customSearch) {
    $row = array();
    $filters = json_decode($customSearch->filters);
    array_push($row, "<b>Name:</b>&nbsp;" . _saved_search_createNameEdit($customSearch->id, $customSearch->search_name) . "</br>"
      .'<b>Keywords:</b> ' . implode(' ', $filters->keywords) . '</br>'
      .'<b>Filters:</b> ' . _saved_search_getFilterTerms($filters->facets) . '</br>'
      ."(<a href=\"$customSearch->search_url\">Run Search Now</a>)"
    );
    array_push(
      $row,
      _saved_search_createUpdateCheckbox(
        'notify-me-new-entries',
        $customSearch->id,
        'new_entries',
        in_array('new', explode(', ', $customSearch->notification_type)),
        'New product notifications'
      )
    );
    array_push(
      $row,
      _saved_search_createUpdateCheckbox(
        'notify-me-major-changes',
        $customSearch->id,
        'major_changes',
        in_array('changed', explode(', ', $customSearch->notification_type)),
        'Updated product notifications'
      )
    );
    array_push($row, $customSearch->last_notification ? $customSearch->last_notification : 'never');
    array_push($row, _saved_search_createRemoveButton($customSearch->id));
    $customSearchRows[$customSearch->id] = $row;
  }

  $output = '';
  $output .= '<h2>Products</h2>';
  $output .= _saved_search_createTableMarkup($productHeaders, $productRows, 'There are no saved Products');
  $output .= '<h2>Companies</h2>';
  $output .= _saved_search_createTableMarkup($companyHeaders, $companyRows, 'There are no saved Companies');
  // $output .= '<h2>Unified Listing Categories</h2>';
  // $output .= _saved_search_createTableMarkup($categoryHeaders, $categoryRows, 'There are no saved Unified Listing Categories');
  $output .= '<h2>Custom Searches</h2>';
  $output .= _saved_search_createTableMarkup($customSearchHeaders, $customSearchRows, 'There are no saved Custom Searches');

  // create remove confirm modal
  $output .= '<div id="notify-me-modal-confirm" class="modal fade" tabindex="-1" role="dialog">'
    .'<div class="modal-dialog" role="document">'
      .'<div class="modal-content">'
        .'<div class="modal-header">'
          .'<button type="button" class="close" data-dismiss="modal" aria-label="Close">'
            .'<span aria-hidden="true">&times;</span>'
          .'</button>'
          .'<h3 class="modal-title">Are you sure?</h3>'
        .'</div>'
        .'<div class="modal-body notify-me-success">'
          .'<p>You have successfully deleted this search.</p>'
        .'</div>'
        .'<div class="modal-body notify-me-form">'
          .'<form id="notify-me-form-delete">'
            .'<input type="hidden" name="id" value="" />'

            .'<div id="notify-me-submit-failed" class="alert alert-danger alert-dismissible notify-me-error" role="alert">'
              .'Something went wrong. Please try again later.'
              .'<button type="button" class="close" data-dismiss="alert" aria-label="Close">'
                .'<span aria-hidden="true">&times;</span>'
              .'</button>'
            .'</div>'
            .'<p>Select  "Remove" to confirm that you want to delete this notification.</p>'
            .'<button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>'
            .'<button type="submit" class="btn btn-primary pull-right">Remove</button>'
          .'</form>'
        .'</div>'
      .'</div>'
    .'</div>'
  .'</div>';

  return $output;
}

function ul_save_and_updates_change_log_form($form, &$form_state) {
  if (!$form_state['submitted']) {
    $form['substantial_revisions'] = array(
      '#markup' => views_embed_view('substantial_revisions', 'substantial_revisions')
    );

    $form['description'] = array(
      '#title' => t('Summary of substantial changes'),
      '#type' => 'textarea',
      '#required' => TRUE,
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Finalize Changes',
    );
  }
  else {
    $form['submitted_message'] = array(
      '#markup' => '<h2>' . $form_state['submitted_message'] . '</h2>'
      .'<p><a href="/content-revisions-summary">Return to Content revisions summary</a></p>'
    );
  }

  return $form;
}

function ul_save_and_updates_change_log_form_submit($form, &$form_state) {
  $fields = array(
    'nid' => arg(3),
    'date_updated' => date('U'),
    'description' => $form_state['values']['description']
  );

  $results = db_insert('change_log')
    ->fields($fields)
    ->execute();

  if ($results > 0) {
    $message = 'Saved successfully!';

  }
  else {
    $message = 'Could not be saved. Please try again later.';
  }

  $form_state['submitted_message'] = $message;
  $form_state['rebuild'] = TRUE;
}

// API Endpoints
function _saved_search_exists($uid, $nid) { // GET
  $results = db_select('saved_searches', 's')
      ->condition('uid', $uid)
      ->condition('nid', $nid)
      ->fields('s')
      ->execute()
      ->fetchAll();

  $count = count($results);

  $data = array('success' => $count > 0);
  return drupal_json_output($data);
}

function _saved_search_readAll($uid) { // GET
   $results = db_select('saved_searches', 's')
      ->condition('uid', $uid)
      ->fields('s')
      ->execute()
      ->fetchAll();

  return drupal_json_output($results);
}

function _saved_search_edit() { // POST
  $id = $_POST['id'];
  unset($_POST['id']);

  $savedSearch = db_select('saved_searches', 's')
      ->condition('id', $id)
      ->fields('s')
      ->execute()
      ->fetchAll();

  $fields = array(
    'uid'               => $savedSearch[0]->uid,
    'nid'               => $savedSearch[0]->nid,
    'search_type'       => $savedSearch[0]->search_type,
    'notification_type' => $savedSearch[0]->notification_type,
    'last_notification' => $savedSearch[0]->last_notification,
    'date_created'      => $savedSearch[0]->date_created,
    'search_url'        => $savedSearch[0]->search_url,
    'search_name'       => $savedSearch[0]->search_name,
    'products_found'    => $savedSearch[0]->products_found,
    'filters'           => $savedSearch[0]->filters,
    'uuid'              => $savedSearch[0]->uuid,
  );

  foreach ($_POST as $key => $value) {
    if (array_key_exists($key, $fields)) {
      $fields[$key] = $value;
    }

    if ($key == 'new_entries' || $key == 'major_changes') {
      $fields['notification_type'] = _saved_search_updateNotificationType($fields['notification_type'], $key, $value);
    }
  }

  $results = db_update('saved_searches')
    ->fields($fields)
    ->condition('id', $id)
    ->execute();

  $data = array('success' => $results > 0, 'result' => $results, $_POST, $fields);
  return drupal_json_output($data);
}

function _saved_search_save() { // POST
  $fields = array(
    'uid'               => -1,
    'nid'               => null,
    'search_type'       => null,
    'notification_type' => null,
    'last_notification' => null,
    'date_created'      => date('U'),
    'search_url'        => null,
    'search_name'       => null,
    'products_found'    => null,
    'filters'           => null,
    'uuid'              => _saved_search_uniqidReal()
  );


  foreach ($_POST as $key => $value) {
    // exclude search_url so that this value doesn't get overwritten
    if (array_key_exists($key, $fields) && $key != 'search_url') {
      $fields[$key] = $value;
    }

    if ($key == 'new_entries' || $key == 'major_changes') {
      $fields['notification_type'] = _saved_search_updateNotificationType($fields['notification_type'], $key, $value);
    }

    // only products and manufacturers should have nids
    if ($key == 'nid') {
      $node = node_load($value);
      $fields['search_name'] = $node->title;
      $fields['search_url'] = '/' . drupal_get_path_alias('node/' . $value);

      if ($node->type == 'manufacturer') {
        $products = implode(',', _saved_search_getManufacturerProducts($node->nid));
        $fields['products_found'] = $products;
      }


    // only saved searches 
    } 
    else {
      if (preg_match('/_search/', $value) === 1) {

        $search_url = $_POST['search_url'];
        $replace = "'^https?:\/\/.*[\r\n]*net'";
        $fields['search_url'] = preg_replace($replace, '', $search_url);
        
        $urlQuery = parse_url($_POST['search_url'], PHP_URL_QUERY); // only exists with classic search

        $urlFragment = parse_url($_POST['search_url'], PHP_URL_FRAGMENT); // only exists with power search
        $replace = "'^!\?'"; // remove extra characters from the fragment
        $urlFragment = preg_replace($replace, '', $urlFragment);


        // build the filters for classic search
        if ($urlQuery != NULL) {
          $urlArray = explode('&', $urlQuery);
          $filters = array();
          foreach ($urlArray as $value) {
            $keyValue = explode('=', $value);
              $filters['facets'][$keyValue[0]] = $keyValue[1];
          }
          
          $filters['keywords'][] = $filters['facets']['search_api_views_fulltext'];
          unset($filters['facets']['search_api_views_fulltext']);
          $filters['prefs'] = array(
            'product_status' => $filters['facets']['product_status'],
            'sort_by' => $filters['facets']['sort_by'],
            'sort_order' => $filters['facets']['sort_order'],
            'items_per_page' => $filters['facets']['items_per_page'],
          );

          // remove the preferences from the facet section
          unset($filters['facets']['product_status']);
          unset($filters['facets']['sort_by']);
          unset($filters['facets']['sort_order']);
          unset($filters['facets']['items_per_page']);

          // rename facets so we can rewrite a cleaned up version
          $filters['filters'] = $filters['facets'];
          unset($filters['facets']);
          foreach ($filters['filters'] as $value) {
            $keyValue = explode('%3A', $value);
            if ($keyValue[0] == 'field_product_categories1') {
              $keyValue[0] = 'product_category';
            }
            if ($keyValue[0] == 'field_operating_system') {
              $keyValue[0] = 'os';
            }
            if ($keyValue[0] == 'field_trouble_with') {
              $keyValue[0] = 'troubles';
            }
            $filters['facets'][$keyValue[0]][] = $keyValue[1];
          }
          
          unset($filters['filters']);
          krsort($filters);
          
        }

        // build the filters for power search
        if ($urlFragment != NULL) {
          // create an array based that includes all filters
          $urlArray = explode('&', $urlFragment);
          $filters = array();
          // set facets so that we can handle multiples 
          foreach ($urlArray as $value) {
            $keyValue = explode('=', $value);
              $filters['facets'][$keyValue[0]][] = $keyValue[1];
          }

          // we don't need to store page number and the query value should be promoted
          unset($filters['facets']['page']);
          $filters['keywords'] = $filters['facets']['query'];
          unset($filters['facets']['query']);
          krsort($filters);

          // switch the variable names back so that the power search passes the URL fragment to get search results below
          $urlQuery = $urlFragment;
          
        }
  
        $fields['filters'] = json_encode($filters);
  
        
        $searchResults = _saved_search_getSearchResults($urlQuery);
        $fields['products_found'] = implode(', ', array_column($searchResults->response->docs, 'is_nid'));
      }
    }  
  }

  $results = db_insert('saved_searches')
    ->fields($fields)
    ->execute();

  $searchResults = _saved_search_getSearchResults(parse_url($_POST['search_url'], PHP_URL_QUERY));

  $data = array('success' => $results > 0, 'result' => $results);


  return drupal_json_output($data);
}


?>