<?php
/**
 * @file
 *  *
 * Custom Blocks and functions related to the SAA site.
 */

/**
 * Implements hook_block_info().
 */
function gpii_saa_custom_block_info() {
  $blocks = array();
  $blocks['product_tree'] = array(
    'info' => t('Product Tree'),
    );
  $blocks['needs_tree'] = array(
    'info' => t('Needs Tree'),
  );
  $blocks['trouble_tree'] = array(
    'info' => t('Trouble Tree'),
  );
  $blocks['test_tree'] = array(
    'info' => t('Test Tree'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function gpii_saa_custom_block_view($delta='') {
  $block = array();

  switch($delta) {
    case 'product_tree' :
      $block['content'] = product_tree_view();
      break;
    case 'needs_tree' :
      $block['content'] = needs_tree_view();
      break;
    case 'trouble_tree' :
      $block['content'] = trouble_tree_view();
      break;
    case 'test_tree' :
      $block['content'] = test_tree_view();
      break;
  }

  return $block;
}

/**
 * Implements hook_block_view(). This blocks lists the items from the Product Categories taxonomy as an unordered list.
 */


function product_tree_view() {
$block = array();
$markup = <<<EOD
<!-- taxonomy term links -->
EOD;
  $vid = 11;
  $vdisplay = 'block_1';
  $primaryCategory = taxonomy_get_tree($vid, 0, 1);
  //dpm($primaryCategory);

  foreach ($primaryCategory as $termid) {
    $link = taxonomy_term_uri($termid);
       $count = count(views_get_view_result('taxonomy_by_tid', $vdisplay, $termid->tid));
       //dpm(count($count));
       if ($count > 0) {
        $markup .= '<h2>' . l(t($termid->name), $link['path'], array('attributes' => array('class' => array('taxonomy-link')))) . ' (' . t($count) . ')</h2>';
       }
       else {
        $markup .= '<h2>' . t($termid->name) . '</h2>';
       }

       $markup .= gpii_saa_custom_list_child_terms($vid, $termid->tid, $vdisplay);
  }

  // Block output in HTML with div wrapper
  $block = array(
      '#prefix' => '<div class="gpii-product-tree">',
      '#type' => 'markup',
      '#markup' => $markup,
      '#suffix' => '</div>',
  );

  return $block;
}

function needs_tree_view() {
$block = array();
$markup = <<<EOD
<!-- taxonomy term links -->
EOD;
  $vid = 5;
  $vdisplay = 'block_2';
  $primaryCategory = taxonomy_get_tree($vid, 0, 1);
  //dpm($primaryCategory);

  foreach ($primaryCategory as $termid) {
    $link = taxonomy_term_uri($termid);
       $count = count(views_get_view_result('taxonomy_by_tid', $vdisplay, $termid->tid));
       //dpm(count($count));
       if ($count > 0) {
        $markup .= '<h2>' . l(t($termid->name), $link['path'], array('attributes' => array('class' => array('taxonomy-link')))) . ' (' . t($count) . ')</h2>';
       }
       else {
        $markup .= '<h2>' . t($termid->name) . '</h2>';
       }

       $markup .= gpii_saa_custom_list_child_terms($vid, $termid->tid, $vdisplay);
  }

  // Block output in HTML with div wrapper
  $block = array(
      '#prefix' => '<div class="gpii-product-tree">',
      '#type' => 'markup',
      '#markup' => $markup,
      '#suffix' => '</div>',
  );

  return $block;
}

function trouble_tree_view() {
$block = array();
$markup = <<<EOD
<!-- taxonomy term links -->
EOD;
  $vid = 8;
  $vdisplay = 'block_2';
  $primaryCategory = taxonomy_get_tree($vid, 0, 1);
  //dpm($primaryCategory);

  foreach ($primaryCategory as $termid) {
    $link = taxonomy_term_uri($termid);
       $count = count(views_get_view_result('taxonomy_by_tid', $vdisplay, $termid->tid));
       //dpm(count($count));
       if ($count > 0) {
        $markup .= '<h2>' . l(t($termid->name), $link['path'], array('attributes' => array('class' => array('taxonomy-link')))) . ' (' . t($count) . ')</h2>';
       }
       else {
        $markup .= '<h2>' . t($termid->name) . '</h2>';
       }

       $markup .= gpii_saa_custom_child_termrefs_table($vid, $termid->tid, 'default');
  }

  // Block output in HTML with div wrapper
  $block = array(
      '#prefix' => '<div class="gpii-product-tree">',
      '#type' => 'markup',
      '#markup' => $markup,
      '#suffix' => '</div>',
  );

  return $block;
}

function test_tree_view() {
$block = array();
$markup = <<<EOD
<!-- taxonomy term links -->
EOD;
  $vid = 3;
  $vdisplay = 'block_3';
  $primaryCategory = taxonomy_get_tree($vid, 0, 1);
  //dpm($primaryCategory);

  foreach ($primaryCategory as $termid) {
    $link = taxonomy_term_uri($termid);
       $count = count(views_get_view_result('taxonomy_by_tid', $vdisplay, $termid->tid));
       //dpm(count($count));
       if ($count > 0) {
        $markup .= '<h2>' . l(t($termid->name), $link['path'], array('attributes' => array('class' => array('taxonomy-link')))) . ' (' . t($count) . ')</h2>';
       }
       else {
        $markup .= '<h2>' . t($termid->name) . '</h2>';
       }

       $markup .= gpii_saa_custom_list_child_terms($vid, $termid->tid, $vdisplay);
  }

  // Block output in HTML with div wrapper
  $block = array(
      '#prefix' => '<div class="gpii-product-tree">',
      '#type' => 'markup',
      '#markup' => $markup,
      '#suffix' => '</div>',
  );

  return $block;
}

function gpii_saa_custom_list_child_terms($vid, $tid, $vdisplay) {
  $li = '';
  $children = taxonomy_get_tree($vid, $tid, 1);
  if ($children) {
    $li .= '<ul>';
    foreach ($children as $key => $value) {
     $link = taxonomy_term_uri($value);
     $count = count(views_get_view_result('taxonomy_by_tid', $vdisplay, $value->tid));
     //dpm(count($count));
     if ($count > 0) {
      $li .= '<li>' . l(t($value->name), $link['path'], array('attributes' => array('class' => array('taxonomy-link')))) . ' (' . t($count) . ')</li>' .  gpii_saa_custom_list_child_terms($vid, $value->tid, $vdisplay);
     }
     else {
      $li .= '<li>' . t($value->name) . '</li>';
     }

    }
     $li .= '</ul>';
  }

  return $li;

}

function gpii_saa_custom_child_termrefs_table($vid, $tid, $vdisplay) {
  $output = '';
  $children = taxonomy_get_tree($vid, $tid, 1);
  if ($children) {
    $output .= '<table class="table table-striped table-bordered table-responsive"><tr><th>Term</th><th>Related</th></tr>';
    foreach ($children as $key => $value) {
     $link = taxonomy_term_uri($value);
     $result = views_embed_view('get_related_terms', $vdisplay, $value->tid);
     // dpm($result);
     // dpm(strpos($result, '<ul class="term">'));
     if (strpos($result, '<ul class="term">') !== false) {
      $output .= '<tr><td>' . l(t($value->name), $link['path'], array('attributes' => array('class' => array('taxonomy-link')))) . '</td><td>' . $result . '</td></tr>' .  gpii_saa_custom_child_termrefs_table($vid, $value->tid, $vdisplay);
      unset($count);
     }
     else {
      $output .= '<td>' . t($value->name) . '</td><td>No related terms found. </td></tr>';
     }

    }
     $output .= '</table>';
  }

  return $output;



}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function gpii_saa_custom_form_facetapi_multiselect_form_alter(&$form, &$form_state) {
  // grab a more modern version of jQuery UI
  $path = libraries_get_path('jquery.ui');
  $form['#attached']['js'][] = $path . '/jquery-ui.min.js';

  // Add the JavaScript and CSS for the library itself.
  $path = libraries_get_path('jquery.multiselect');
  $form['#attached']['js'][] = $path . '/jquery.multiselect.min.js';
  $form['#attached']['css'][] = $path . '/jquery.multiselect.css';

  // Add a custom JavaScript file which will trigger the jQuery MultiSelect
  // widget on the correct form elements.
  $form['#attached']['js'][] = drupal_get_path('module', 'gpii_saa_custom') . '/js/gpii_saa_custom.facetapi.multiselect.js';
}
