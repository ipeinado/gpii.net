<?php



/**
 * hook_search_api_solr_query_alter
 *
 * make the basic search translate terms if non-English
 */

require __DIR__ . '/../../../vendor/autoload.php';
use Google\Cloud\Translate\TranslateClient;

function gpii_saa_custom_search_api_solr_query_alter(&$call_args, $query) {
  $pathArray = explode('/', request_path());
  $language = $pathArray[0];
  if ($language !== 'en') {
    $googleApiKey = variable_get('GOOGLE_API_KEY');
    $clientSettings = array('key' => $googleApiKey);
    $translateSettings = array('target' => 'en');
    $translate = new TranslateClient($clientSettings);
    $result = $translate->translate($call_args['query'], $translateSettings);
    $translated = $result['text'];
    $call_args['query'] = str_replace('&quot;', '', $translated);
    // Uncomment to view/debug query string
    // drupal_set_message(json_encode($call_args), 'status');
  }
}

/**
 * @file
 *  *
 * Custom Blocks and functions related to the SAA site.
 */


/**
 * Implements hook_permission().
 */
function gpii_saa_custom_permission() {
  return array(
    'access advanced search data' => array(
      'title' => t('Access api data for advanced search'),
    )
  );
}


/**
 * Implements hook_block_info().
 */
function gpii_saa_custom_block_info() {
  $blocks = array();
  $blocks['product_tree'] = array(
    'info' => t('Product Tree'),
    );
  $blocks['needs_tree'] = array(
    'info' => t('Needs Tree'),
  );
  $blocks['trouble_tree'] = array(
    'info' => t('Trouble Tree'),
  );
  $blocks['test_tree'] = array(
    'info' => t('Test Tree'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function gpii_saa_custom_block_view($delta='') {
  $block = array();

  switch($delta) {
    case 'product_tree' :
      $block['content'] = product_tree_view();
      break;
    case 'needs_tree' :
      $block['content'] = needs_tree_view();
      break;
    case 'trouble_tree' :
      $block['content'] = trouble_tree_view();
      break;
    case 'test_tree' :
      $block['content'] = test_tree_view();
      break;
  }

  return $block;
}

/**
 * Implements hook_block_view(). This blocks lists the items from the Product Categories taxonomy as an unordered list.
 */


function product_tree_view() {
$block = array();
$markup = <<<EOD
<!-- taxonomy term links -->
EOD;
  $vid = 11;
  $vdisplay = 'block_1';
  $primaryCategory = taxonomy_get_tree($vid, 0, 1);
  //dpm($primaryCategory);

  foreach ($primaryCategory as $termid) {
    $destination = drupal_get_destination();
    $link = taxonomy_term_uri($termid);
       $count = count(views_get_view_result('taxonomy_by_tid', $vdisplay, $termid->tid));
       //dpm(count($count));
       if ($count > 0) {
        $markup .= '<h2>' . l(t($termid->name), $link['path'], array('attributes' => array('class' => array('taxonomy-link')))) . ' (' . t($count) . ') ' . l(t('<i class="fa fa-crosshairs" title="Products with \'' . $termid->name . '\' as their terminal record."></i><span class="sr-only">Products with \'' . $termid->name . '\' as their terminal record.</span>'), '/reports/taxonomy/terminal/' . $termid->tid, array('query' => array('destination' => $destination['destination']), 'attributes' => array('class' => array('taxonomy-link')), 'html' => TRUE)) . '</h2>';
       }
       else {
        $markup .= '<h2>' . t($termid->name) . '</h2>';
       }

       $markup .= gpii_saa_custom_list_child_terms($vid, $termid->tid, $vdisplay);
  }

  // Block output in HTML with div wrapper
  $block = array(
      '#prefix' => '<div class="gpii-product-tree">',
      '#type' => 'markup',
      '#markup' => $markup,
      '#suffix' => '</div>',
  );

  return $block;
}

function needs_tree_view() {
$block = array();
$markup = <<<EOD
<!-- taxonomy term links -->
EOD;
  $vid = 5;
  $vdisplay = 'block_2';
  $primaryCategory = taxonomy_get_tree($vid, 0, 1);
  //dpm($primaryCategory);

  foreach ($primaryCategory as $termid) {
    $link = taxonomy_term_uri($termid);
       $count = count(views_get_view_result('taxonomy_by_tid', $vdisplay, $termid->tid));
       //dpm(count($count));
       if ($count > 0) {
        $markup .= '<h2>' . l(t($termid->name), $link['path'], array('attributes' => array('class' => array('taxonomy-link')))) . ' (' . t($count) . ')</h2>';
       }
       else {
        $markup .= '<h2>' . t($termid->name) . '</h2>';
       }

       $markup .= gpii_saa_custom_list_child_terms($vid, $termid->tid, $vdisplay);
  }

  // Block output in HTML with div wrapper
  $block = array(
      '#prefix' => '<div class="gpii-product-tree">',
      '#type' => 'markup',
      '#markup' => $markup,
      '#suffix' => '</div>',
  );

  return $block;
}

function trouble_tree_view() {
$block = array();
$markup = <<<EOD
<!-- taxonomy term links -->
EOD;
  $vid = 8;
  $vdisplay = 'block_2';
  $primaryCategory = taxonomy_get_tree($vid, 0, 1);
  //dpm($primaryCategory);

  foreach ($primaryCategory as $termid) {
    $link = taxonomy_term_uri($termid);
       $count = count(views_get_view_result('taxonomy_by_tid', $vdisplay, $termid->tid));
       //dpm(count($count));
       if ($count > 0) {
        $markup .= '<h2>' . l(t($termid->name), $link['path'], array('attributes' => array('class' => array('taxonomy-link')))) . ' (' . t($count) . ')</h2>';
       }
       else {
        $markup .= '<h2>' . t($termid->name) . '</h2>';
       }

       $markup .= gpii_saa_custom_child_termrefs_table($vid, $termid->tid, 'default');
  }

  // Block output in HTML with div wrapper
  $block = array(
      '#prefix' => '<div class="gpii-product-tree">',
      '#type' => 'markup',
      '#markup' => $markup,
      '#suffix' => '</div>',
  );

  return $block;
}

function test_tree_view() {
$block = array();
$markup = <<<EOD
<!-- taxonomy term links -->
EOD;
  $vid = 3;
  $vdisplay = 'block_3';
  $primaryCategory = taxonomy_get_tree($vid, 0, 1);
  //dpm($primaryCategory);

  foreach ($primaryCategory as $termid) {
    $destination = drupal_get_destination();
    $link = taxonomy_term_uri($termid);
       $count = count(views_get_view_result('taxonomy_by_tid', $vdisplay, $termid->tid));
       //dpm(count($count));
       if ($count > 0) {
        $markup .= '<h2>' . l(t($termid->name), $link['path'], array('attributes' => array('class' => array('taxonomy-link')))) . ' (' . t($count) . ')' . l(t('<i class="fa fa-crosshairs" title="Products with \'' . $value->name . '\' as their terminal record."></i><span class="sr-only">Products with \'' . $value->name . '\' as their terminal record.</span>'), '/reports/taxonomy/terminal/' . $value->tid, array('query' => array('destination' => $destination['destination']), 'attributes' => array('class' => array('taxonomy-link')), 'html' => TRUE)) . '</h2>';
       }
       else {
        $markup .= '<h2>' . t($termid->name) . '</h2>';
       }

       $markup .= gpii_saa_custom_list_child_terms($vid, $termid->tid, $vdisplay);
  }

  // Block output in HTML with div wrapper
  $block = array(
      '#prefix' => '<div class="gpii-product-tree">',
      '#type' => 'markup',
      '#markup' => $markup,
      '#suffix' => '</div>',
  );

  return $block;
}

function gpii_saa_custom_list_child_terms($vid, $tid, $vdisplay) {
  $li = '';
  $destination = drupal_get_destination();
  $children = taxonomy_get_tree($vid, $tid, 1);
  if ($children) {
    $li .= '<ul>';
    foreach ($children as $key => $value) {
     $link = taxonomy_term_uri($value);
     $count = count(views_get_view_result('taxonomy_by_tid', $vdisplay, $value->tid));
     //dpm(count($count));
     if ($count > 0) {
      $li .= '<li>' . l(t($value->name), $link['path'], array('attributes' => array('class' => array('taxonomy-link')))) . ' (' . t($count) . ') ' . l(t('<i class="fa fa-crosshairs" title="Products with \'' . $value->name . '\' as their terminal record."></i><span class="sr-only">Products with \'' . $value->name . '\' as their terminal record.</span>'), '/reports/taxonomy/terminal/' . $value->tid, array('query' => array('destination' => $destination['destination']), 'attributes' => array('class' => array('taxonomy-link')), 'html' => TRUE)) . '</li>' .  gpii_saa_custom_list_child_terms($vid, $value->tid, $vdisplay);
     }
     else {
      $li .= '<li>' . t($value->name) . '</li>';
     }

    }
     $li .= '</ul>';
  }

  return $li;

}

function gpii_saa_custom_child_termrefs_table($vid, $tid, $vdisplay) {
  $output = '';
  $children = taxonomy_get_tree($vid, $tid, 1);
  if ($children) {
    $output .= '<table class="table table-striped table-bordered table-responsive"><tr><th>Term</th><th>Related</th></tr>';
    foreach ($children as $key => $value) {
     $link = taxonomy_term_uri($value);
     $destination = drupal_get_destination();
     $editlink = l(t('Edit'), '/taxonomy/term/' . $value->tid . '/edit', array('query' => array('destination' => $destination['destination']), 'attributes' => array('class' => array('btn btn-sm btn-default pull-right'))));


     $result = views_embed_view('get_related_terms', $vdisplay, $value->tid);
     // dpm($result);
     // dpm(strpos($result, '<ul class="term">'));
     if (strpos($result, '<ul class="term">') !== false) {
      $output .= '<tr><td>' . l(t($value->name), $link['path'], array('attributes' => array('class' => array('taxonomy-link')))) . ' ' . $editlink . '</td><td>' . $result . '</td></tr>' .  gpii_saa_custom_child_termrefs_table($vid, $value->tid, $vdisplay);
      unset($count);
     }
     else {
      $output .= '<td>' . t($value->name) .  ' ' . $editlink . '</td><td>No related terms found. </td></tr>';
     }

    }
     $output .= '</table>';
  }

  return $output;

}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function gpii_saa_custom_form_facetapi_multiselect_form_alter(&$form, &$form_state) {
  // grab a more modern version of jQuery UI
  $path = libraries_get_path('jquery.ui');
  $form['#attached']['js'][] = $path . '/jquery-ui.min.js';

  // Add the JavaScript and CSS for the library itself.
  $path = libraries_get_path('jquery.multiselect');
  $form['#attached']['js'][] = $path . '/jquery.multiselect.min.js';
  $form['#attached']['css'][] = $path . '/jquery.multiselect.css';

  // Add a custom JavaScript file which will trigger the jQuery MultiSelect
  // widget on the correct form elements.
  $form['#attached']['js'][] = drupal_get_path('module', 'gpii_saa_custom') . '/js/gpii_saa_custom.facetapi.multiselect.js';
}


    /**
    * Implements hook_menu().
     * This is experimental code to look at whether we can bypass services and kick out some JSON that doesn't take forever and a day to load.
    */
    function gpii_saa_custom_menu() {
      // $items['api/v1/productapi'] = array( // used for testing and manipulating objects before converting to JSON
      //   'title' => 'Products API Experimentation',
      //   'page callback' => 'gpii_saa_custom_products_json',
      //   'access arguments' => array('administer content'),
      // );
      $items['api/v1/products/adv-search'] = array(
        'title' => 'Products Advanced Search Endpoint',
        'page callback' => 'gpii_saa_custom_products_advsearch',
        'access arguments' => array('access advanced search data'),
      );
      $items['api/v1/products/all'] = array(
        'title' => 'Products Endpoint',
        'page callback' => 'gpii_saa_custom_products_ulisting',
        'access arguments' => array('access advanced search data'),
      );
      $items['reports/taxonomy/terminal/%'] = array(
        'title' => 'Terminal Taxonomy Report',
        'page callback' => 'gpii_saa_custom_term_terminal',
        'page arguments' => array(3),
        'access arguments' => array('administer content'),
      );

      return $items;
    }


    /**
    * This callback is used to view a list of product records where a given taxonomy
     * term has children, but the products do not have any of those children selected.
     *
     * Note: the taxonomy_review_depth_experiment_ view can't use "Term Reference Tree"
     * or else this page returns no results. (known bug)
    */

    function gpii_saa_custom_term_terminal($tid) {
      $children = taxonomy_get_children($tid);

      $name = 'taxonomy_review_depth_experiment_';
      $display_id = 'page';

      $result = views_get_view_result($name, $display_id, $tid);

      //kpr($result);
      //kpr(array_keys($children));
      $children = array_keys($children);

      foreach ($result as $key => $value) {
        # get the terms on the node and unset the row if we find a match
        $terms = gpii_saa_custom_get_term_ids($value->_field_data['nid']['entity']);
        $match = array_intersect($children, $terms);
        if (count($match) > 0) {
          unset($result[$key]);
        }
      }


      $headers = array(
          'user' => array('data' => t('NID'), 'field' => 'nid'),
          'title' => array('data' => t('Title'), 'field' => 'title'),
          'prod_categories' => array('data' => t('Product Categories'), 'field' => 'prod_categories'),
          'prod_features' => array('data' => t('Needs and Wants'), 'field' => 'prod_features'),
          'ops' => array('data' => t('Operations'))
      );

      $rows = array();
      foreach ($result as $terminal_nodes) {
        if (isset($terminal_nodes->field_field_features[0]['rendered']['#markup'])) {
          $features = $terminal_nodes->field_field_features[0]['rendered']['#markup'];
        }
        else {
          $features = '';
        }

      $rows[$terminal_nodes->nid] = array(
      'nid' => $terminal_nodes->_field_data['nid']['entity']->nid,
       'title' => l($terminal_nodes->_field_data['nid']['entity']->title, 'node/' . $terminal_nodes->_field_data['nid']['entity']->nid),
       'prod_categories' => $terminal_nodes->field_field_product_categories1[0]['rendered']['#markup'],
       'prod_features' => $features,
       // 'terms' => implode(", ", gpii_saa_custom_get_terms($terminal_nodes->_field_data['nid']['entity'])), // allows for all terms defined below
       'ops' => l(t('edit'), '/node/' . $terminal_nodes->_field_data['nid']['entity']->nid . '/edit', array('query' => array('destination' => current_path()),'attributes' => array('class' => array('btn', 'btn-success'))))
      );
      }

      $form['invited_users'] = array(
        '#markup' => theme('table', array(
        'header' => $headers,
        'rows' => $rows,
        'attributes' => array('class' => array('terminal_nodes')),
        '#empty' =>t('No results.'),
        ))
      );


      $term = taxonomy_term_load($tid);
      $destination = drupal_get_destination();
      return '<p>The following table includes product records where <strong>' . $term->name  . ' (tid: ' . $tid . ')</strong> is the terminal item in this branch of the tree.</p><p><strong>Result Count: </strong>' . count($rows) . '</p> ' . render($form['invited_users']) . '<a href="/node/3244" class="btn btn-primary btn-lg"><i class="fa fa-chevron-left" style="margin-right: 0.rem;"></i> Return to Product Categories Outline</a>';
    }


    function gpii_saa_custom_get_term_ids($node) {
      $terms = array();

      // Duplicate foreach loop below - based on https://www.drupal.org/node/909968#comment-11979178
      // which was throwing a bunch of php warnings for no good reason and slowed everything way down
        if (field_get_items('node', $node, 'field_product_categories1') != '') {
          foreach (field_get_items('node', $node, 'field_product_categories1') as $item) {
            if (is_array($item) && !empty($item['tid'])) {
              $terms[] = $item['tid'];
            }
          }
        }
        if (field_get_items('node', $node, 'field_features') != '') {
          foreach (field_get_items('node', $node, 'field_features') as $item) {
            if (is_array($item) && !empty($item['tid'])) {
              $terms[] = $item['tid'];
            }
          }
        }

      return $terms;
    }
    function gpii_saa_custom_get_terms($node) {
      $terms = array();

      // Duplicate foreach loop below - based on https://www.drupal.org/node/909968#comment-11979178
      // which was throwing a bunch of php warnings for no good reason and slowed everything way down
        if (field_get_items('node', $node, 'field_product_categories1') != '') {
          foreach (field_get_items('node', $node, 'field_product_categories1') as $item) {
            if (is_array($item) && !empty($item['tid'])) {
              $terms[] = $item['tid'];
            }
          }
        }
        if (field_get_items('node', $node, 'field_features') != '') {
          foreach (field_get_items('node', $node, 'field_features') as $item) {
            if (is_array($item) && !empty($item['tid'])) {
              $terms[] = $item['tid'];
            }
          }
        }

        foreach ($terms as $key => $value) {
           $term = taxonomy_term_load($value);
           $terms[$key] = $term->name;
        }
      return $terms;
    }

    /**
    * Custom callback function used for experimenting with objects and proof of concept
    */
    function gpii_saa_custom_products_json() {
      $result = db_query('SELECT * FROM ProductsUnifiedListing LIMIT 10');
        $record = $result->fetchAll();

        // initialize a new variable for use in the output
        $output = array();
        // iterate through the records and remove null values
        foreach ($record as $key => $value) {
          $output[] = (object) array_filter((array) $value);
        }

        // trim the body field by calling text_summary and clean up the markup
        foreach ($output as $key => $value) {
          if (isset($value->body)) {
            $summary = text_summary($value->body, $value->format, 400);
            $summary = check_markup($summary, $value->format);
            $value->body = $summary;
          }

          // make needs into an object that matches the original format
          if (isset($value->needs)) {
            $tids = explode(',', $value->needs);

            foreach ($tids as $num => $id) {
              $tid[] = (object) array('tid' => $id);
            }
            $value->needs = $tid;
            // clear this after each loop
            unset($tid);
          }
        }
        //using kpr due to issue with dpm in latest bootstrap
        kpr($output);
        return '';
    }

    /**
    * This callback is used by the advanced search nodejs application
    */
    function gpii_saa_custom_products_advsearch() {
      $result = db_query('SELECT * FROM ProductsAdvSearch');
        $record = $result->fetchAll();

        // initialize a new variable for use in the output
        $output = array();

        // iterate through the records and remove null values
        foreach ($record as $key => $value) {
          $output[] = (object) array_filter((array) $value);
        }

        // trim the body field by calling text_summary and clean up the markup
        foreach ($output as $key => $value) {
          if (isset($value->body_summary)) {
            $value->body = $value->body_summary;
          }

          elseif (isset($value->body)) {
            $summary = text_summary($value->body, $value->format, 400);
            $summary = check_markup($summary, $value->format);
            $value->body = $summary;
          }
        }

        // convert the object to JSON
        return drupal_json_output($output);
    }

    /**
    * This callback is used by the Unified Listing application to retrieve a list
     * of SAI records for comparison and synchronization.
    */
    function gpii_saa_custom_products_ulisting() {
      $result = db_query('SELECT * FROM ProductsUnifiedListing');
        $record = $result->fetchAll();

        // initialize a new variable for use in the output
        $output = array();

        // iterate through the records and remove null values
        foreach ($record as $key => $value) {
          $output[] = (object) array_filter((array) $value);
        }

        // trim the body field by calling text_summary and clean up the markup
        foreach ($output as $key => $value) {
          if (isset($value->body)) {
            $summary = text_summary($value->body, $value->format, 400);
            $summary = check_markup($summary, $value->format);
            $value->body = $summary;
          }

          // make needs into an object that matches the original format
          if (isset($value->needs)) {
            $tids = explode(',', $value->needs);

            foreach ($tids as $num => $id) {
              $tid[] = (object) array('tid' => $id);
            }
            $value->needs = $tid;
            // clear this after each loop
            unset($tid);
          }

          // make needs into an object that matches the original format
          if (isset($value->product_category)) {
            $tids = explode(',', $value->product_category);

            foreach ($tids as $num => $id) {
              $tid[] = (object) array('tid' => $id);
            }
            $value->product_category = $tid;
            // clear this after each loop
            unset($tid);
          }

          // make needs into an object that matches the original format
          if (isset($value->product_image)) {
            //@@ this needs to be rewritten to handle additional image fields (hidden, permission, source)
            //as well as to handle multiple values


            // alt may be empty, so set it to null if it's not available in this context
            if (!isset($value->alt)) {
              $value->alt = '';
            }
            // pull a few values out of the top level and insert them as
            // objects under product_image

            $value->product_image = (object) array(
              'fid' => $value->fid,
              'filename' => $value->filename,
              'uri' => $value->product_image,
              'alt' => $value->alt,
              'filemime' => $value->filemime,
              'filesize' => $value->filesize,
              'status' => $value->status,
              'timestamp' => $value->timestamp,
              'origname' => $value->origname,
              //'experiment' => $value->experiment
              );


            // unset variables used above
            unset($value->fid);
            unset($value->filename);
            unset($value->alt);
            unset($value->filemime);
            unset($value->filesize);
            unset($value->status);
            unset($value->timestamp);
            unset($value->origname);

          }
        }

        // convert the object to JSON
        return drupal_json_output($output);
    }



/**
 * Implements hook_services_postprocess() to insert info about the language we're actually sending
 *
 * @@ need to add same logic for the needs and wants view
 */

function gpii_saa_custom_services_request_postprocess_alter($controller, $args, &$result) {

  //Debugging
   // print($controller['view info']['view_name']);
   // print_r($controller);
   // print_r($result);
   // exit;

   // Identify JSON returned by the documents available view and make a few adjustments to the output.
   if (isset($controller['view info'])) {
    if ($controller['view info']['view_name'] == 'product_categories') {

      // get the currently active language
      global $language ;
      $lang = $language->language ;


      foreach ($result as $key => $value) {
        // call the fuction with term id and language
        $translation_status = gpii_custom_get_translation_status($result[$key]->term_id, $lang);
        if ($translation_status > 0) {
          $result[$key]->lang = $lang;
        }
      }
    }
    if ($controller['view info']['view_name'] == 'difficulties_categories') {

      // get the currently active language
      global $language ;
      $lang = $language->language ;


      foreach ($result as $key => $value) {
        // call the fuction with term id and language
        $translation_status = gpii_custom_get_translation_status($result[$key]->term_id, $lang);
        if ($translation_status > 0) {
          $result[$key]->lang = $lang;
        }
      }
    }
  }
}
